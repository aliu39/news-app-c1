{"version":3,"sources":["logo.svg","components/Article.js","App.js","serviceWorker.js","index.js"],"names":["Article","props","toggleContent","setState","showContent","state","saveArticle","cached","img_src","info","urlToImage","source","name","title","description","url","content","fullData","console","log","className","onClick","this","src","align","href","target","React","Component","baseUrl","App","updateRefs","updateCache","newCache","seen","Set","i","refs","length","article","current","push","add","cache","data","has","toggleTab","tab","articles","cachedRefs","lastCategory","category","h","Headers","append","req","Request","method","headers","mode","fetch","then","response","ok","json","Error","jsonData","articleData","newRefs","createRef","catch","err","message","getNews","map","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b70242dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\n\nconst img_na =\n  \"https://www.sahilgraphics.com/wp-content/themes/shahil/assets/\" +\n  \"images/image-not-found.jpg\";\n\nexport default class Article extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img_src: props.info.urlToImage,\n      source: props.info.source.name,\n      title: props.info.title,\n      description: props.info.description,\n      url: props.info.url,\n      content: props.info.content,\n      fullData: props.info,\n      showContent: false,\n      cached: false\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"new article\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"destroying article\");\n  }\n\n  toggleContent = () => {\n    this.setState({\n      showContent: !this.state.showContent\n    });\n  };\n\n  saveArticle = () => {\n    this.setState({\n      cached: true\n    });\n  };\n\n  /* prettier-ignore */\n  render() {\n    return (\n      <div className=\"article\" onClick={this.toggleContent}>\n        <img src={this.state.img_src != null ? this.state.img_src : img_na}></img>\n        <p>\n          <b>{this.state.title + \" \" + this.state.source}</b> <br/>\n          {this.state.description} <br/>\n        </p>\n        <p>\n          {this.state.showContent ? this.state.content : null}\n          {/* {this.state.fullData} */}\n        </p>\n        <p align=\"right\">\n          <a href={this.state.url} target=\"_blank\">original article</a> <br />\n          <button className=\"tab\" onClick={this.saveArticle}>\n            save\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Article from \"./components/Article\";\n\nclass Obj extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>{this.props.title + \" \" + this.props.num}</h1>\n        <h1>{JSON.stringify(this.props.myObj)}</h1>\n      </header>\n    );\n  }\n}\n\nconst Body = props => (\n  <p>\n    Edit <code>src/App.js</code> and save to reload.\n    <a\n      className=\"App-link\"\n      href=\"https://reactjs.org\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {props.text}\n    </a>\n  </p>\n);\n\n/* GET NEWS FROM API CODE */\n\n// NETLIFY to deploy site\n// or github.io\n\n// consideration: keep country as US or go international?\n// consider whether cors available after deploying site\nconst proxy = \"https://cors-anywhere.herokuapp.com/\";\nconst baseUrl = \"https://newsapi.org/v2/top-headlines?country=us&category=\"; //to be modified by getNews()\nconst key = \"&apiKey=f6d3a364faf54888a77e0bab46b8b66c\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      articles: [], //json data\n      refs: [],\n      tab: 0,\n      cache: [],\n      cachedRefs: [],\n      lastCategory: \"\"\n    };\n  }\n\n  getNews(category) {\n    // if (category !== this.state.lastCategory) {\n    let h = new Headers();\n    h.append(\"Accept\", \"application/json\");\n    console.log(baseUrl);\n    let req = new Request(proxy + baseUrl + category + key, {\n      method: \"GET\",\n      headers: h,\n      mode: \"cors\"\n    });\n\n    fetch(req)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"faulty request response\");\n        }\n      })\n      .then(jsonData => {\n        //first update cache\n        if (this.state.tab) {\n          this.toggleTab();\n        }\n        if (category !== this.state.lastCategory) {\n          this.updateCache();\n        }\n\n        var articleData = [];\n        var newRefs = [];\n        for (let i = 0; i < jsonData.articles.length; i++) {\n          articleData.push(jsonData.articles[i]);\n          newRefs.push(React.createRef());\n        }\n        console.log(\"setting lastCategory to \" + category);\n        this.setState({\n          articles: articleData,\n          refs: newRefs,\n          lastCategory: category\n        });\n      })\n      .catch(err => {\n        console.log(\"ERROR: \", err.message);\n      });\n  }\n\n  updateRefs = () => {\n    //go through current tab and saves refs in\n    //requires: called only in current tab\n  };\n\n  updateCache = () => {\n    console.log(\"cache update\");\n    let newCache = [];\n    let seen = new Set();\n    for (let i = 0; i < this.state.refs.length; i++) {\n      let article = this.state.refs[i].current;\n      if (article.state.cached) {\n        newCache.push(article.state.fullData);\n        seen.add(article.state.url);\n      }\n    }\n    for (let i = 0; i < this.state.cache.length; i++) {\n      let data = this.state.cache[i];\n      if (seen.has(data.url)) {\n        console.log(\"deleted old save entry\");\n      } else {\n        newCache.push(data);\n      }\n    }\n    return newCache;\n  };\n\n  toggleTab = () => {\n    let newCache = this.state.tab ? this.state.cache : this.updateCache();\n    this.setState({\n      articles: newCache,\n      tab: !this.state.tab,\n      cache: this.state.articles\n    });\n  };\n\n  render() {\n    //App className obsolete\n    return (\n      <div>\n        <div align=\"center\">\n          <button\n            className=\"search\"\n            onClick={() => this.getNews(\"entertainment\")}\n          >\n            Entertainment\n          </button>\n          <button className=\"search\" onClick={() => this.getNews(\"sports\")}>\n            Sports\n          </button>\n          <button className=\"search\" onClick={() => this.getNews(\"technology\")}>\n            Technology\n          </button>\n        </div>\n        <br />\n        <div align=\"right\">\n          <button className=\"tab\" onClick={this.toggleTab}>\n            {this.state.tab ? \"Return to search\" : \"Saved articles\"}\n          </button>\n        </div>\n        <div className=\"scrollable\">\n          <ul>\n            {this.state.articles.map((article, i) => (\n              <Article\n                info={article}\n                key={article.url}\n                tab={this.state.tab}\n                ref={this.state.refs[i]}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}