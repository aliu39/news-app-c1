{"version":3,"sources":["components/Article.js","App.js","serviceWorker.js","index.js"],"names":["getDate","publishedAt","sliceTo","indexOf","slice","Article","props","saveArticle","setState","cached","state","img_src","info","urlToImage","source","name","title","description","url","content","date","fullData","tab","className","src","this","alt","align","href","target","rel","onClick","React","Component","App","composeUrl","PROXY","US","currPage","category","keywords","length","i","getNews","h","Headers","append","reqUrl","req","Request","method","headers","mode","fetch","then","response","ok","json","Error","status","jsonData","toggleTab","updateCache","totalCount","totalResults","articleData","newRefs","articles","push","createRef","refs","requests","scrollRef","current","scrollTop","catch","err","console","log","message","newCache","seen","Set","numEntries","article","add","cache","data","has","clearCache","categoryBtn","cat","pageDecr","pageIncr","Math","ceil","toggleCountry","handleChange","event","currKeyword","value","handleSubmit","concat","preventDefault","clearKeywords","onSubmit","type","style","marginLeft","marginRight","onChange","toString","ref","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.39ee12c3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst img_na =\n  \"https://www.sahilgraphics.com/wp-content/themes/shahil/assets/\" +\n  \"images/image-not-found.jpg\";\n\n// remove time from publishedAt field\nfunction getDate(publishedAt) {\n  //sample pubishedAt format: 2020-11-05T03:22:00Z\n  let sliceTo = publishedAt.indexOf(\"T\");\n  if (sliceTo >= 0) {\n    return publishedAt.slice(0, sliceTo);\n  } else {\n    return publishedAt;\n  }\n}\n\n/* child of root App component and rendered in scrollable div */\n/* contains article data specifics and whether or not the article should be \n   added to the cache when changing tabs */\nexport default class Article extends React.Component {\n  constructor(props) {\n    super(props);\n    // pre-parse and store props json \"info\"\n    this.state = {\n      img_src: props.info.urlToImage,\n      source: props.info.source.name,\n      title: props.info.title,\n      description: props.info.description,\n      url: props.info.url,\n      content: props.info.content,\n      date: getDate(props.info.publishedAt),\n      fullData: props.info, //to be accessed by parent App and added to cache\n      cached: false, //whether article should be saved on next update to App\n      tab: props.tab\n    };\n  }\n\n  // for debugging\n  /*\n  componentDidMount() {\n    console.log(\"new article\");\n  }*/\n\n  /*\n  componentWillUnmount() {\n    console.log(\"destroying article\");\n  }*/\n\n  saveArticle = () => {\n    this.setState({\n      cached: true\n    });\n  };\n\n  /* prettier-ignore */\n  render() {\n    return (\n      <div className=\"article\">\n        <img src={this.state.img_src != null ? this.state.img_src : img_na} alt=\"failed to load\"></img>\n        <p>\n          <b>{this.state.title + \" | \" + this.state.source + \" | \" + this.state.date}</b> <br/>\n          {this.state.description} <br/>\n        </p>\n        <p>\n          {this.state.content}\n        </p>\n        <p align=\"right\">\n          <a href={this.state.url} target=\"_blank\" rel=\"noreferrer\">\n            original article</a> <br />\n          {this.state.tab ? null :\n            <button onClick={this.saveArticle}>save</button>\n          }\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Article from \"./components/Article\";\n\nconst APIKEY = \"78b9d599c4f94f8fa3afb1a5458928d6\";\nconst PROXY = \"https://cors-anywhere.herokuapp.com/\";\nconst PAGESIZE = 20; //default articles per request defined by NewsAPI\n//const key2 = \"&apiKey=f6d3a364faf54888a77e0bab46b8b66c\"; //free developer key\n\n/* Root component. Contains most of site's functionality */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      articles: [], //data as json objects\n      refs: [], //refs to children, used to check if cache should update\n      tab: false, //\"is currently on saved tab\"\n      cache: [], //json data of currently hidden tab\n      category: \"\",\n      keywords: [],\n      US: true,\n      currPage: 1,\n      currKeyword: \"\", //used for form element / controlled text\n      totalResults: 0, //article count from last request, across ALL pages\n      requests: 0 //# successful requests made so far\n    };\n    this.scrollRef = React.createRef(); //ref to scrollable div element\n  }\n\n  // compose request url from state\n  composeUrl = () => {\n    let url =\n      PROXY +\n      \"https://newsapi.org/v2/top-headlines?\" +\n      \"apiKey=\" +\n      APIKEY +\n      (this.state.US ? \"&country=us\" : \"\") +\n      \"&pageSize=\" +\n      PAGESIZE +\n      \"&page=\" +\n      this.state.currPage +\n      \"&category=\" +\n      this.state.category;\n    if (this.state.keywords.length > 0) {\n      url += \"&q=\";\n      for (let i = 0; i < this.state.keywords.length; i++) {\n        url += this.state.keywords[i];\n      }\n    }\n    return url;\n  };\n\n  // uses curr. state search params to make new request and store new data\n  /* if App state is changed immediately before this is called, getNews must be \n     used as a setState callback, as setState is asynchronous */\n  getNews = () => {\n    //avoid null category request\n    if (this.state.category !== \"\") {\n      let h = new Headers();\n      h.append(\"Accept\", \"application/json\");\n      let reqUrl = this.composeUrl();\n      let req = new Request(reqUrl, {\n        method: \"GET\",\n        headers: h,\n        mode: \"cors\"\n      });\n\n      fetch(req)\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error(\"faulty response status \" + response.status);\n          }\n        })\n        .then(jsonData => {\n          // first update cache\n          if (this.state.tab) {\n            this.toggleTab();\n          } else {\n            this.updateCache();\n          }\n\n          // create new refs and store along with new data\n          let totalCount = jsonData.totalResults;\n          let articleData = [];\n          let newRefs = [];\n          //note: articles.length <= PAGESIZE\n          for (let i = 0; i < jsonData.articles.length; i++) {\n            articleData.push(jsonData.articles[i]);\n            newRefs.push(React.createRef());\n          }\n          this.setState(\n            {\n              articles: articleData,\n              refs: newRefs,\n              totalResults: totalCount,\n              requests: this.state.requests + 1\n            },\n            () => (this.scrollRef.current.scrollTop = 0) //reset scrollable div\n          );\n        })\n        .catch(err => {\n          console.log(\"ERROR: \", err.message);\n        });\n    }\n  };\n\n  // iterate through current article refs, cache ones with state.cached = true\n  // lazily called before changing tab or making a new request\n  updateCache = () => {\n    let newCache = [];\n    let seen = new Set();\n    let numEntries = 0;\n    // new entries\n    for (let i = 0; numEntries < PAGESIZE && i < this.state.refs.length; i++) {\n      let article = this.state.refs[i].current;\n      if (article.state.cached) {\n        newCache.push(article.state.fullData);\n        seen.add(article.state.url);\n        numEntries++;\n      }\n    }\n    // old entries\n    for (let i = 0; numEntries < PAGESIZE && i < this.state.cache.length; i++) {\n      let data = this.state.cache[i];\n      if (seen.has(data.url)) {\n        // avoid duplicates\n        // console.log(\"deleted old save entry\");\n      } else {\n        newCache.push(data);\n        numEntries++;\n      }\n    }\n    return newCache;\n  };\n\n  clearCache = () => {\n    if (this.state.tab) {\n      this.setState({\n        articles: []\n      });\n    }\n  };\n\n  // change between saved article and search results tab\n  toggleTab = () => {\n    let newCache = this.state.tab ? this.state.cache : this.updateCache();\n    this.setState({\n      articles: newCache,\n      tab: !this.state.tab,\n      cache: this.state.articles\n    });\n  };\n\n  // search button functions\n  categoryBtn = cat => {\n    this.setState(\n      {\n        category: cat,\n        currPage: 1,\n        keywords: []\n      },\n      this.getNews\n    );\n  };\n\n  pageDecr = () => {\n    if (this.state.currPage > 1) {\n      this.setState(\n        {\n          currPage: this.state.currPage - 1\n        },\n        this.getNews\n      );\n    }\n  };\n\n  pageIncr = () => {\n    if (this.state.currPage < Math.ceil(this.state.totalResults / PAGESIZE)) {\n      this.setState(\n        {\n          currPage: this.state.currPage + 1\n        },\n        this.getNews\n      );\n    }\n  };\n\n  toggleCountry = () => {\n    this.setState(\n      {\n        US: !this.state.US\n      },\n      this.getNews\n    );\n  };\n\n  // Form fxs (integrates HTML form w/React state, using controlled text)\n  handleChange = event => {\n    this.setState({ currKeyword: event.target.value });\n  };\n\n  handleSubmit = event => {\n    if (this.state.currKeyword !== \"\") {\n      this.setState(\n        {\n          keywords: [this.state.currKeyword].concat(this.state.keywords),\n          currKeyword: \"\",\n          currPage: 1\n        },\n        this.getNews\n      );\n    }\n    event.preventDefault();\n  };\n\n  clearKeywords = () => {\n    this.setState({ keywords: [] }, this.getNews);\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Main category buttons */}\n        <div align=\"center\">\n          <button\n            className=\"styled categoryBtn\"\n            onClick={() => this.categoryBtn(\"entertainment\")}\n          >\n            Entertainment\n          </button>\n          <button\n            className=\"styled categoryBtn\"\n            onClick={() => this.categoryBtn(\"sports\")}\n          >\n            Sports\n          </button>\n          <button\n            className=\"styled categoryBtn\"\n            onClick={() => this.categoryBtn(\"technology\")}\n          >\n            Technology\n          </button>\n        </div>\n\n        <div className=\"controlbar\">\n          {/* previous/next page buttons */}\n          <div className=\"prevnext\">\n            {this.state.tab ? null : this.state.currPage === 1 ? null : (\n              <button onClick={this.pageDecr} className=\"styled\">\n                prev\n              </button>\n            )}\n            {this.state.tab ? null : this.state.currPage >=\n              Math.ceil(this.state.totalResults / PAGESIZE) ? null : (\n              <button onClick={this.pageIncr} className=\"styled\">\n                next\n              </button>\n            )}\n          </div>\n\n          {/* keyword form + country filter */}\n          <div className=\"searchbar\">\n            <form onSubmit={this.handleSubmit}>\n              <input\n                type=\"text\"\n                style={{ marginLeft: 10, marginRight: 10 }}\n                value={this.state.currKeyword}\n                onChange={this.handleChange}\n              ></input>\n              <input type=\"submit\" value=\"Add keyword\"></input>\n              <button onClick={this.clearKeywords}>Clear Filters</button>\n              <button onClick={this.toggleCountry}>\n                {this.state.US ? \"Intl.\" : \"U.S.\"}\n              </button>\n            </form>\n            {this.state.keywords.toString()} <br />\n          </div>\n\n          {/* toggle tab + clear cache buttons */}\n          <div className=\"tab\">\n            {this.state.tab ? (\n              <button onClick={this.clearCache} className=\"styled\">\n                Clear\n              </button>\n            ) : null}\n            <button onClick={this.toggleTab} className=\"styled\">\n              {this.state.tab ? \"Search results\" : \"Saved articles\"}\n            </button>\n          </div>\n        </div>\n\n        {/* articles (output div) */}\n        <div className=\"scrollable\" ref={this.scrollRef}>\n          {this.state.articles.length === 0 ? (\n            <h2>\n              <b>\n                {this.state.requests === 0\n                  ? \"Click a category to begin\"\n                  : this.state.tab\n                  ? \"No saved articles\"\n                  : \"No results found\"}\n              </b>\n            </h2>\n          ) : null}\n          <ul>\n            {this.state.articles.map((article, i) => (\n              /* store reference to */\n              <Article\n                info={article}\n                key={this.state.tab + i + article.url}\n                tab={this.state.tab}\n                ref={this.state.refs[i]}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}